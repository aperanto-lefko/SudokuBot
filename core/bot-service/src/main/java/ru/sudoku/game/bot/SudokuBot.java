package ru.sudoku.game.bot;

import lombok.RequiredArgsConstructor;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.CallbackQuery;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import ru.sudoku.game.model.SudokuCell;
import ru.sudoku.game.service.GameService;
import ru.sudoku.game.ui.SudokuUIHelper;

@Component
@RequiredArgsConstructor
public class SudokuBot extends TelegramLongPollingBot {
    private final GameService gameService;
    private final SudokuUIHelper uiHelper;
    @Value("${telegram.bot.username}")
    private String botUserName;
    private final String botToken = System.getenv("TELEGRAM_SUDOKU_BOT_TOKEN");

    @Override
    public void onUpdateReceived(Update update) {
        if (update.hasCallbackQuery()) {
            handleCallback(update.getCallbackQuery());
            return;
        }
        //  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, /start)
        if (update.hasMessage() && update.getMessage().hasText()) {
            long chatId = update.getMessage().getChatId();
            String text = update.getMessage().getText();

            if ("/start".equalsIgnoreCase(text)) {
                SendMessage msg = uiHelper.buildDifficultySelection(chatId);
                executeSafe(msg);
            } else if ("/rules".equalsIgnoreCase(text)) {
                String rulesText = getRules();
                executeSafe(SendMessage.builder()
                        .chatId(chatId)
                        .text(rulesText)
                        .build());
            } else {
                executeSafe(SendMessage.builder()
                        .chatId(chatId)
                        .text("–ù–∞–ø–∏—à–∏ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É\n/rules- –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã")
                        .build());
            }
        }
    }


    private void executeSafe(SendMessage msg) {
        try {
            execute(msg);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    private void handleCallback(CallbackQuery query) {
        String data = query.getData();
        long chatId = query.getMessage().getChatId();
        if (data.startsWith("DIFFICULTY_")) {
            String level = data.substring("DIFFICULTY_".length());
            int blanks;

            switch (level) {
                case "EASY":
                    blanks = 3;
                    break;
                case "MEDIUM":
                    blanks = 6;
                    break;
                case "HARD":
                    blanks = 8;
                    break;
                default:
                    blanks = 4;
            }

            SudokuCell[][] board = gameService.newGame(chatId, blanks);
            SendMessage msg = uiHelper.buildBoardMessage(chatId, board);
            executeSafe(msg);
        } else if (data.startsWith("CELL_")) {
            String[] parts = data.split("_");
            int r = Integer.parseInt(parts[1]);
            int c = Integer.parseInt(parts[2]);

            SendMessage msg = uiHelper.buildNumberSelection(chatId, r, c);
            executeSafe(msg);
        } else if (data.startsWith("VALUE_")) {
            String[] parts = data.split("_");
            int row = Integer.parseInt(parts[1]);
            int col = Integer.parseInt(parts[2]);
            int value = Integer.parseInt(parts[3]);

            gameService.setCell(chatId, row, col, value);
            SudokuCell[][] board = gameService.getBoard(chatId);

            SendMessage msg = uiHelper.buildBoardMessage(chatId, board);
            executeSafe(msg);
            if (gameService.isBoardFull(chatId)) { // –º–µ—Ç–æ–¥ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –µ—Å—Ç—å –ª–∏ –Ω—É–ª–∏
                if (gameService.isSolved(chatId)) {
                    executeSafe(SendMessage.builder()
                            .chatId(chatId)
                            .text("–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! Sudoku —Ä–µ—à–µ–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ üéâ")
                            .build());

                } else {
                    executeSafe(SendMessage.builder()
                            .chatId(chatId)
                            .text("–í—Å–µ –∫–ª–µ—Ç–∫–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã, –Ω–æ —Ä–µ—à–µ–Ω–∏–µ –Ω–µ–≤–µ—Ä–Ω–æ–µ ‚ùå")
                            .build());
                }
            }
        } else if ("CANCEL".equals(data)) {
            SudokuCell[][] board = gameService.getBoard(chatId);
            SendMessage msg = uiHelper.buildBoardMessage(chatId, board);
            executeSafe(msg);
        }
    }

    private String getRules() {
        return "üìã –ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã Sudoku 4x4:\n\n" +
                "‚Ä¢ –ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Å–µ—Ç–∫—É 4x4 —á–∏—Å–ª–∞–º–∏ –æ—Ç 1 –¥–æ 4 \n" +
                "‚Ä¢ –í –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤—Å–µ —á–∏—Å–ª–∞ –æ—Ç 1 –¥–æ 4 –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π\n" +
                "‚Ä¢ –í –∫–∞–∂–¥–æ–º —Å—Ç–æ–ª–±—Ü–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤—Å–µ —á–∏—Å–ª–∞ –æ—Ç 1 –¥–æ 4 –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π\n" +
                "‚Ä¢ –í –∫–∞–∂–¥–æ–º –±–ª–æ–∫–µ 2x2 –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤—Å–µ —á–∏—Å–ª–∞ –æ—Ç 1 –¥–æ 4 –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π\n\n" +
                "‚úèÔ∏è –ö–∞–∫ –∏–≥—Ä–∞—Ç—å:\n" +
                "‚Ä¢ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–ª–µ—Ç–∫—É —Å–æ –∑–Ω–∞–∫–æ–º ‚ùì —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å —á–∏—Å–ª–æ\n" +
                "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É üßπ —Å—Ç–µ—Ä–µ—Ç—å –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∫–ª–µ—Ç–∫–∏\n" +
                "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É ‚Ü©Ô∏è –æ—Ç–º–µ–Ω–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è\n" +
                "‚Ä¢ –¶–∏—Ñ—Ä—ã —Å —Ç–æ—á–∫–æ–π –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω—è—Ç—å, –±–µ–∑ —Ç–æ—á–∫–∏ –∏–∑–º–µ–Ω—è—Ç—å –Ω–µ–ª—å–∑—è";
    }

    @Override
    public String getBotUsername() {
        return botUserName;
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–∫–µ–Ω (—Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞)
    @Override
    public String getBotToken() {
        return botToken;
    }


}
