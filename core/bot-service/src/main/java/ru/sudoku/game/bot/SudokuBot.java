package ru.sudoku.game.bot;

import feign.FeignException;
import lombok.AccessLevel;
import lombok.RequiredArgsConstructor;
import lombok.experimental.FieldDefaults;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.CallbackQuery;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import ru.sudoku.game.dto.SudokuCellDto;
import ru.sudoku.game.feign.GameServiceClient;
import ru.sudoku.game.ui.SudokuUIHelper;

@Component
@RequiredArgsConstructor
@FieldDefaults(level = AccessLevel.PRIVATE)
@Slf4j
public class SudokuBot extends TelegramLongPollingBot {
    final GameServiceClient gameServiceclient;
    final SudokuUIHelper uiHelper;
    @Value("${telegram.bot.username}")
    String botUserName;
    @Value("${telegram.bot.token}")
    String botToken;

    @Override
    public void onUpdateReceived(Update update) {
        log.info(" –ü–æ–ª—É—á–µ–Ω–æ –Ω–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram");
        if (update.hasCallbackQuery()) {
            log.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º");
            handleCallback(update.getCallbackQuery());
            return;
        }
        //  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, /start)
        if (update.hasMessage() && update.getMessage().hasText()) {
            long chatId = update.getMessage().getChatId();
            String text = update.getMessage().getText();
            log.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ: {}", chatId, text);
            if ("/start".equalsIgnoreCase(text)) {
                log.info("–ù–∞—á–∞–ª–æ –Ω–æ–≤–æ–π –∏–≥—Ä—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}", chatId);
                SendMessage msg = uiHelper.buildDifficultySelection(chatId);
                executeSafe(msg);
            } else if ("/rules".equalsIgnoreCase(text)) {
                log.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} –∑–∞–ø—Ä–æ—Å–∏–ª –ø—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã", chatId);
                String rulesText = getRules();
                sendText(chatId, rulesText);
            } else {
                log.warn("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}", chatId);
                sendText(chatId, "–ù–∞–ø–∏—à–∏ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É\n/rules- –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã");
            }
        }
    }


    private void executeSafe(SendMessage msg) {
        try {
            execute(msg);
        } catch (TelegramApiException e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {}", e.getMessage(), e);
        }
    }

    private void handleCallback(CallbackQuery query) {
        String data = query.getData();
        long chatId = query.getMessage().getChatId();
        log.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–∞ '{}' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}", data, chatId);
        try {
            if (data.startsWith("DIFFICULTY_")) {
                String level = data.substring("DIFFICULTY_".length());
                log.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} –≤—ã–±—Ä–∞–ª —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏: {}", chatId, level);
                int blanks;
                switch (level) {
                    case "EASY" -> blanks = 3;
                    case "MEDIUM" -> blanks = 6;
                    case "HARD" -> blanks = 8;
                    default -> blanks = 4;
                }

                SudokuCellDto[][] board = gameServiceclient.newGame(chatId, blanks);
                log.info("–ù–æ–≤–∞—è –∏–≥—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}", chatId);
                SendMessage msg = uiHelper.buildBoardMessage(chatId, board);
                executeSafe(msg);
            } else if (data.startsWith("CELL_")) {
                String[] parts = data.split("_");
                int r = Integer.parseInt(parts[1]);
                int c = Integer.parseInt(parts[2]);
                log.info(" –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} –≤—ã–±—Ä–∞–ª –∫–ª–µ—Ç–∫—É ({}, {})", chatId, r, c);
                SendMessage msg = uiHelper.buildNumberSelection(chatId, r, c);
                executeSafe(msg);
            } else if (data.startsWith("VALUE_")) {
                String[] parts = data.split("_");
                int row = Integer.parseInt(parts[1]);
                int col = Integer.parseInt(parts[2]);
                int value = Integer.parseInt(parts[3]);
                log.info(" –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ {} –≤ –∫–ª–µ—Ç–∫—É ({}, {})", chatId, value, row, col);
                gameServiceclient.setCell(chatId, row, col, value);
                SudokuCellDto[][] board = gameServiceclient.getBoard(chatId);

                SendMessage msg = uiHelper.buildBoardMessage(chatId, board);
                executeSafe(msg);
                if (gameServiceclient.isBoardFull(chatId)) { // –º–µ—Ç–æ–¥ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –µ—Å—Ç—å –ª–∏ –Ω—É–ª–∏
                    log.info(" –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç–∏ –ø–æ–ª—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}", chatId);
                    if (gameServiceclient.isSolved(chatId)) {
                        log.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} —É—Å–ø–µ—à–Ω–æ —Ä–µ—à–∏–ª —Å—É–¥–æ–∫—É!", chatId);
                        sendText(chatId, "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! Sudoku —Ä–µ—à–µ–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ üéâ");
                        SendMessage startButtonMessage = uiHelper.buildStartButtonMessage(chatId);
                        executeSafe(startButtonMessage);
                    } else {
                        log.info(" –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} –∑–∞–ø–æ–ª–Ω–∏–ª —Å—É–¥–æ–∫—É –Ω–µ–≤–µ—Ä–Ω–æ", chatId);
                        sendText(chatId, "–í—Å–µ –∫–ª–µ—Ç–∫–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã, –Ω–æ —Ä–µ—à–µ–Ω–∏–µ –Ω–µ–≤–µ—Ä–Ω–æ–µ ‚ùå");
                    }
                }
            } else if ("CANCEL".equals(data)) {
                log.info("‚Ü©–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} –Ω–∞–∂–∞–ª –æ—Ç–º–µ–Ω—É", chatId);
                SudokuCellDto[][] board = gameServiceclient.getBoard(chatId);
                SendMessage msg = uiHelper.buildBoardMessage(chatId, board);
                executeSafe(msg);
            }
            else if ("NEW_GAME".equals(data)) {
                log.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} –Ω–∞—á–∞–ª –Ω–æ–≤—É—é –∏–≥—Ä—É —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É", chatId);
                SendMessage msg = uiHelper.buildDifficultySelection(chatId);
                executeSafe(msg);
                return;
            }
        } catch (FeignException.NotFound ex) {
            log.warn("–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: {}", chatId, ex.getMessage());
            sendText(chatId, "\"‚ö†\uFE0F –ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—É—é –∏–≥—Ä—É –∫–æ–º–∞–Ω–¥–æ–π /start\"");
        } catch (FeignException ex) {
            log.error("–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –∏–≥—Ä–æ–≤—ã–º —Å–µ—Ä–≤–µ—Ä–æ–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: {}", chatId, ex.getMessage());
            sendText(chatId, "‚ö†\uFE0F –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –∏–≥—Ä–æ–≤—ã–º —Å–µ—Ä–≤–µ—Ä–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
        } catch (Exception e) {
            log.error("–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: {}", chatId, e.getMessage(), e);
            sendText(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ üò¢");
        }
    }

    private String getRules() {
        return "üìã –ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã Sudoku 4x4:\n\n" +
                "‚Ä¢ –ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Å–µ—Ç–∫—É 4x4 —á–∏—Å–ª–∞–º–∏ –æ—Ç 1 –¥–æ 4 \n" +
                "‚Ä¢ –í –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤—Å–µ —á–∏—Å–ª–∞ –æ—Ç 1 –¥–æ 4 –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π\n" +
                "‚Ä¢ –í –∫–∞–∂–¥–æ–º —Å—Ç–æ–ª–±—Ü–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤—Å–µ —á–∏—Å–ª–∞ –æ—Ç 1 –¥–æ 4 –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π\n" +
                "‚Ä¢ –í –∫–∞–∂–¥–æ–º –±–ª–æ–∫–µ 2x2 –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤—Å–µ —á–∏—Å–ª–∞ –æ—Ç 1 –¥–æ 4 –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π\n\n" +
                "‚úèÔ∏è –ö–∞–∫ –∏–≥—Ä–∞—Ç—å:\n" +
                "‚Ä¢ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–ª–µ—Ç–∫—É —Å–æ –∑–Ω–∞–∫–æ–º ‚ùì —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å —á–∏—Å–ª–æ\n" +
                "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É üßπ —Å—Ç–µ—Ä–µ—Ç—å –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∫–ª–µ—Ç–∫–∏\n" +
                "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É ‚Ü©Ô∏è –æ—Ç–º–µ–Ω–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è\n" +
                "‚Ä¢ –¶–∏—Ñ—Ä—ã —Å —Ç–æ—á–∫–æ–π –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω—è—Ç—å, –±–µ–∑ —Ç–æ—á–∫–∏ –∏–∑–º–µ–Ω—è—Ç—å –Ω–µ–ª—å–∑—è";
    }

    private void sendText(long chatId, String text) {
        log.info("–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {}: {}", chatId, text);
        SendMessage message = SendMessage.builder()
                .chatId(chatId)
                .text(text)
                .build();
        executeSafe(message);
    }

    @Override
    public String getBotUsername() {
        return botUserName;
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–∫–µ–Ω (—Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞)
    @Override
    public String getBotToken() {
        return botToken;
    }
}
